y<-dsn(x,alpha=5)
plot(x,y,type='l',col='green',lwd=3)
title('Density of a right-skewed distribut')
x<-seq(-4,4,0.1)
y<-dsn(x,alpha=5)
plot(x,y,type='l',col='green',lwd=3)
title('Density of a right-skewed distribut')
stereograms<-read.table(file ='~/Desktop/stat359/data/stereograms.txt', sep="",header=TRUE)
stereograms
ice<- read.table(file ='~/Desktop/stat359/data/latent_heat.txt', sep="",header=TRUE)
ice
a<-ice$Method_A
b<-ice$Method_B
var.test(a,b)
a<-ice$Method_A[!is.na(ice$Method_A)]
b<-ice$Method_B[!is.na(ice$Method_B)]
var.test(a,b)
iron<-read.table(file ='~/Desktop/stat359/data/iron.txt', sep="",header=TRUE)
iron
iron
var.test(a,b)
weights<-read.table(file ='~/Desktop/stat359/data/growth.txt',header=TRUE,sep="")
attach(weights)
names(weights)
weights<-read.table(file ='~/Desktop/stat359/data/growth.txt',header=TRUE,sep="")
attach(weights)
names(weights)
weights<-read.table(file ='~/Desktop/stat359/data/growth.txt',header=TRUE,sep="")
attach(weights)
names(weights)
weights
weightss<-read.table(file ='~/Desktop/stat359/data/growth.txt',header=TRUE,sep="")
attach(weightss)
names(weightss)
weights<-read.table(file ='~/Desktop/stat359/data/growth.txt',header=TRUE,sep="")
weights
weights<-read.table(file ='~/Desktop/stat359/data/growth.csv',header=TRUE,sep="")
weights
library(knitr)
kable(weights, caption = 'Animal Weight Gain',align='l')
knitr::opts_chunk$set(echo = TRUE)
2
days
tv<-read.table(file ='~/Desktop/stat359/data/car_speeds.txt', sep="",header=TRUE)
tv
tv<-read.table(file ='~/Desktop/stat359/data/tv.txt', sep="",header=TRUE)
tv
tv<-read.table(file ='~/Desktop/stat359/data/tv.txt', sep="",header=TRUE)
tv
summary(tv)
min_canada<-(tv$Canada[!is.na(tv$Canada)])
min_US<-(tv$US[!is.na(tv$US)])
boxplot(min_canada,min_US, col='green',names=c('Minutes in Canada','Minutes is the US'))
min_canada
min_US
boxplot(min_canada,min_US, col='green',main = "The time watching TV in 2 countries", sub = "Written by Koki Itagaki",names=c('Minutes in Canada','Minutes is the US'))
sample.variance<-function(y){
return.variance <-  1/(length(y)-1))*sum((y - sum(y)/length(y))^2
sample.variance<-function(y){
return.variance <-  1/(length(y)-1))*sum((y - sum(y)/length(y))^2
sample.variance<-function(y){
return.variance <-  (1/(length(y)-1))*sum((y - sum(y)/length(y))^2)
return.variance
}
y <-c(11,11,10,8,11,3,15,11,7,6)
sample.variance(y)
z.test<-function(y1,y2,H1){
# compute the value of the test statistic
Z.obs<-(mean(y1) - mean(y2))/sqrt( (var(y1)/length(y1)) +  (var(y2)/length(y2)))
# compute the p-value
if(H1 == "less"){
p.value.obs<-pnorm(Z.obs)
}else if(H1 == "two.sided"){
p.value.obs<-2*(1 - pnorm(Z.obs))
}else{
p.value.obs<-1 - pnorm(Z.obs)
}
p.value.obs
}
z.test(min_canada,min_US,"two sided")
z.test(min_canada,min_US,"greater")
z.test(min_canada,min_US,"less")
z.test<-function(y1,y2,H1){
# compute the value of the test statistic
Z.obs<-(mean(y1) - mean(y2))/sqrt( (var(y1)/length(y1)) +  (var(y2)/length(y2)))
# compute the p-value
if(H1 == "less"){
p.value.obs<-pnorm(Z.obs)
}else if(H1 == "two.sided"){
p.value.obs<-2*(1 - pnorm(Z.obs))
}else if(H1 == "greater"){
p.value.obs<-1 - pnorm(Z.obs)
}
p.value.obs
}
z.test(min_canada,min_US,"two sided")
z.test<-function(y1,y2,H1){
# compute the value of the test statistic
Z.obs<-(mean(y1) - mean(y2))/sqrt( (var(y1)/length(y1)) +  (var(y2)/length(y2)))
# compute the p-value
if(H1 == "less"){
p.value.obs<-pnorm(Z.obs)
}else if(H1 == "two.sided"){
p.value.obs<-2*(1 - pnorm(Z.obs))
}else if(H1 == "greater"){
p.value.obs<-1 - pnorm(Z.obs)
}
p.value.obs
}
z.test(min_canada,min_US,"two sided")
z.test(min_canada,min_US,"two sided")
z.test<-function(y1,y2,H1){
# compute the value of the test statistic
Z.obs<-(mean(y1) - mean(y2))/sqrt( (var(y1)/length(y1)) +  (var(y2)/length(y2)))
# compute the p-value
if(H1 == "less"){
p.value.obs<-pnorm(Z.obs)
p.value.obs
}else if(H1 == "two.sided"){
p.value.obs<-2*(1 - pnorm(Z.obs))
p.value.obs
}else if(H1 == "greater"){
p.value.obs<-1 - pnorm(Z.obs)
p.value.obs
}
z.test(min_canada,min_US,"two sided")
z.test(min_canada,min_US,"greater")
z.test(min_canada,min_US,"less")
}
z.test<-function(y1,y2,H1){
# compute the value of the test statistic
Z.obs<-(mean(y1) - mean(y2))/sqrt( (var(y1)/length(y1)) +  (var(y2)/length(y2)))
# compute the p-value
if(H1 == "less"){
p.value.obs<-pnorm(Z.obs)
p.value.obs
}else if(H1 == "two.sided"){
p.value.obs<-2*(1 - pnorm(Z.obs))
p.value.obs
}else if(H1 == "greater"){
p.value.obs<-1 - pnorm(Z.obs)
p.value.obs
}
}
z.test(min_canada,min_US,"two sided")
z.test(min_canada,min_US,"greater")
z.test(min_canada,min_US,"less")
z.test(min_canada,min_US,"two sided")
z.test(min_canada,min_US,"two sided")
z.test(min_canada,min_US,"two.sided")
z.test<-function(y1,y2,H1){
# compute the value of the test statistic
Z.obs<-(mean(y1) - mean(y2))/sqrt( (var(y1)/length(y1)) +  (var(y2)/length(y2)))
# compute the p-value
if(H1 == "less"){
p.value.obs<-pnorm(Z.obs)
p.value.obs
}else if(H1 == "two.sided"){
p.value.obs<-(1 - pnorm(Z.obs))*2
p.value.obs
}else if(H1 == "greater"){
p.value.obs<-1 - pnorm(Z.obs)
p.value.obs
}
}
z.test(min_canada,min_US,"two.sided")
z.test(min_canada,min_US,"greater")
tv<-read.table(file ='~/Desktop/stat359/data/tv.txt', sep="",header=TRUE)
tv
summary(tv)
min_canada<-(tv$Canada[!is.na(tv$Canada)])
min_US<-(tv$US[!is.na(tv$US)])
mean(c(min_canada,min_US))
boxplot(min_canada,min_US, col='green',main = "The time watching TV in 2 countries", sub = "Written by Koki Itagaki",names=c('Minutes in Canada','Minutes is the US'))
c(mean(min_canada),mean(min_US))
x.uniform1<- rpois(n = 1000, size = 100, 0,1)
salt<-read.table(file ='~/Desktop/stat359/data/salt.txt', sep="",header=TRUE)
salt
skew(salt)
boxplot(salt,main= "A mixture of salt and sucrose",sub = "Written by koki Itagaki",col='green',names='salt')
boxplot(salt,main= "A mixture of salt and sucrose",sub = "Written by koki Itagaki",col='green',names='salt')
qqnorm(salt, main = "QQ-plot: A mixture of salt and sucrose")
qqnorm(salt, main = "QQ-plot: A mixture of salt and sucrose")
sa;t
salt
qqnorm(salt, main = "QQ-plot: A mixture of salt and sucrose")
qqnorm(salt$salt, main = "QQ-plot: A mixture of salt and sucrose")
hist(saltt, main = "A mixture of salt and sucrose")
saltt<-salt$salt
summary(saltt)
boxplot(saltt,main= "A mixture of salt and sucrose",sub = "Written by koki Itagaki",col='green',names='salt')
hist(saltt, main = "A mixture of salt and sucrose")
qqnorm(saltt, main = "QQ-plot: A mixture of salt and sucrose")
hist(saltt, main = "A mixture of salt and sucrose")
x<-saltt ## data for bootstrapping
B<-15000
x.boot<-matrix(data=sample(x=x,size=B*length(x),replace=TRUE),nrow=length(x),ncol=B)
skew.boot.sampled<-apply(x.boot,2,skew)
skew<-function(x){
m3<-sum((x-mean(x))^3)/length(x)
s3<-sqrt(var(x))^3
m3/s3  }
x<-saltt ## data for bootstrapping
B<-15000
x.boot<-matrix(data=sample(x=x,size=B*length(x),replace=TRUE),nrow=length(x),ncol=B)
skew.boot.sampled<-apply(x.boot,2,skew)
boot.interval<-quantile(skew.boot.sampled,probs=c(0.025,0.975))
skew.hat.NV
skew.saltt<-skew(saltt)
skew.saltt
boot.interval
hist(skew.boot.sampled, main='Empirical Distribution for Skew.hat',xlab='Sampled Values')
abline(v= skew.saltt, col='red')
fabric<-read.table(file ='~/Desktop/stat359/data/fabric.txt', sep="",header=TRUE)
fabric<-read.table(file ='~/Desktop/stat359/data/fabric.txt',sep="",header=TRUE)
fabric<-read.table(file ='~/Desktop/stat359/data/fabric.txt',sep="",header=TRUE)
read.table(file ='~/Desktop/stat359/data/fabric.txt',sep="",header=TRUE)
read.table(file ='~/Desktop/stat359/data/fabric.txt',sep="",header=TRUE,fill= TRUE)
read.table(file ='~/Desktop/stat359/data/fabric.txt',sep="",header=TRUE)
read.table(file ='~/Desktop/stat359/data/fabric.txt',header=TRUE)
read.table(file ='~/Desktop/stat359/data/fabric.txt',sep="",header=TRUE)
read.table(file ='~/Desktop/stat359/data/fecundity.txt',sep="",header=TRUE)
fecundity<-read.table(file ='~/Desktop/stat359/data/fecundity.txt',sep="",header=TRUE)
rs<-fecundity$RS
ns<-fecundity$NS
var.test(rs,ns)
t.test(rs,ns,alternative = "two.sided", mu = 0, var.equal = TRUE)
read.table(file ='~/Desktop/stat359/data/fabric.txt',sep="",header=TRUE)
z.test(min_canada,min_US,"two.sided")
z.test(min_canada,min_US,"greater")
z.test(min_canada,min_US,"less")
c(mean(min_canada),mean(min_US))
boxplot(min_canada,min_US, col='green',main = "The time watching TV in 2 countries", sub = "Written by Koki Itagaki",names=c('Minutes in Canada','Minutes is the US'))
data()
companydataframe<- data.frame(Company = c(1,2), Time(minutes) = c(c(102, 86, 98, 109, 92),c(81, 165, 97, 134, 92, 87, 114)))
companydataframe<- data.frame(Company <- c(1,2), Time(minutes) <- c(c(102, 86, 98, 109, 92),c(81, 165, 97, 134, 92, 87, 114)))
#To decide which t-test I will use, I need to know if the sample
#variance is the same or not
var.test(c1,c2)
c1<-c(102, 86, 98, 109, 92)
c2<-c(81, 165, 97, 134, 92, 87, 114)
#To decide which t-test I will use, I need to know if the sample
#variance is the same or not
var.test(c1,c2)
#To decide which t-test I will use, I need to know if the sample
#variance is the same or not
var.test(c1,c2,"two.sided")
#To decide which t-test I will use, I need to know if the sample
#variance is the same or not
var.test(c1,c2,alternative = "two.sided")
#To decide which t-test I will use, I need to know if the sample
#variance is the same or not
var.test(c1,c2,alternative = "two.sided",conf.level	= 0.01)
#To decide which t-test I will use, I need to know if the sample
#variance is the same or not
var.test(c1,c2,alternative = "two.sided",conf.level	= 0.99)
#To decide which t-test I will use, I need to know if the sample
#variance is the same or not
var.test(c1,c2,alternative = "two.sided")
#To decide which t-test I will use, I need to know if the sample
#variance is the same or not
var.test(c1,c2,alternative = "two.sided",conf.level	= 0.99)
#To decide which t-test I will use, I need to know if the sample
#variance is the same or not
var.test(c1,c2,alternative = "two.sided",conf.level	= 0.90)
c(summary(c1),summary(c2))
summary(c2)
summary(c1)
boxoplot(c1,c2, names = c("Company 1", "Company 2"),
main = "Running time of films",sub = "Written by Koki")
boxplot(c1,c2, names = c("Company 1", "Company 2"),
main = "Running time of films",sub = "Written by Koki")
qqnorm(c1)
qqnorm(c2)
t.test(c1,c2,alternative = "less",mu = 10, var.equal = "FALSE")
t.test(c1,c2,alternative = "less",mu = 10, var.equal = FALSE)
t.test(c1,c2,alternative = "less",mu = 10, var.equal = FALSE,conf.level	= 0.90)
y
y<-34L
y
15%/%2
5%%2
class(a)
U<-seq(4,18,0.5)
U
x <-c(10,20,30)
names(x)<- c("Monday", "Tuesday", "Wednesday")
x
Data_frame<- data.frame(subject now = c("stat123","stat354"),subject before = c("csc225"))
Data_frame<- data.frame(subject_now = c("stat123","stat354"),subject_before = c("csc225"))
Data_frame
5%%2
data()
AirPassengers
head(AirPassengers)
head(Airquality)
head(airquality)
#num of column
ncol(airquality)
#num of row
nrow(airquality)
#sample(vector, 何個、　TRUEだとreplace = ok)
sample(a, 3, TRUE)
sample(a, 3, TRUE)
sample(a, 3, TRUE)
sample(a, 3, TRUE)
sample(a, 3, TRUE)
a<-c(1,2,3,4,5,6,7)
#sample(vector, 何個、　TRUEだとreplace = ok)
sample(a, 3, TRUE)
sample(a, 3, TRUE)
sample(a, 3, TRUE)
sample(a, 3, TRUE)
sample(a, 3, TRUE)
sample(4:70,20,replace = T)
set.seed(10)
sample(2:70,20, TRUE)
sample(2:70,20, TRUE)
sample(2:70,20, TRUE)
sample(2:70,20, TRUE)
set.seed(10)
sample(2:70,20, TRUE)
sample(2:70,20, TRUE)
set.seed(10)
sample(2:70,20, TRUE)
set.seed(10)
sample(2:70,3, TRUE)
sample(2:70,3, TRUE)
sample(2:70,3, TRUE)
sample(2:70,3, TRUE)
sample(2:70,3, TRUE)
v
v
sample(2:70,3, TRUE)
sample(2:70,3, TRUE)
set.seed(10)
sample(2:70,3)
sample(2:70,3)
sample(2:70,3)
sample(2:70,3)
sample(2:70,3)
set.seed(10)
sample(2:70,3)
set.seed(10)
sample(2:70,3)
set.seed(10)
sample(2:70,3)
set.seed(10)
sample(2:70,3)
v
set.seed(10)
sample(2:70,3)
set.seed(1)
sample(1:nrow(airquality),5)
set.seed(1)
sample(1:nrow(airquality),5)
data("trees")
head(trees)
nrow(trees)
#Access columns
trees$Height
trees$["Height"]
trees["Height"]
trees[["Height"]]
#計算したい時は$使う
mean(b)
sample.row <- sample(1:nrow(trees), 2)
sample<-trees[sample.row]
sample.row <- sample(1:nrow(trees), 2)
sample<-trees[sample.row,]
sample$height
sample.row <- sample(1:nrow(trees), 2)
sample<-trees[sample.row,]
sample$Volume
sample.row <- sample(1:nrow(trees), 2)
sample.row
sample<-trees[sample.row,]
sample
sample$Volume
round(mean(trees$Volume,2))
Data_Frame<- data.frame(Traniing = c("Height","Weight","Other"),pulse = c(100,200,300))
Data_Frame
New_row <- rbind(Data_Frame,c("Strength", 110))
New_row
Data_Frame
D
Data
Data<-Data_Frame[-c(1),-c(1)]
Data
Data<-Data_Frame[-c(1),-c(1)]
Data
Data_Frame_new<-Data_Frame[-c(1),-c(1)]
Data_Frame_new
Data_Frame_new<-Data_Frame[-c(1),-c(1)]
Data_Frame_new
Data_Frame
Data_Frame_new
Data_Frame<- data.frame(Traniing = c("Height","Weight","Other"),pulse = c(100,200,300), time = (100,200,232))
Data_Frame<- data.frame(Traniing = c("Height","Weight","Other"),pulse = c(100,200,300), time = (100,200,232))
Data_Frame<- data.frame(Traniing = c("Height","Weight","Other"),pulse = c(100,200,300), time = (100,200,232))
Data_Frame<- data.frame(Traniing = c("Height","Weight","Other"),pulse = c(100,200,300), time = c(100,200,232))
Data_Frame
Data_Frame_new<-Data_Frame[-c(1),-c(1)]
Data_Frame_new
summary(Data_Frame_new)
mtrix<-matrix(c(1,2,3,4,5,6,7,8,9,0,11,22,33,44,55), nrow = 3, ncol = 5)
mtrix
st
st<-(c("banana", "ringo"), nrow = 1, ncol = 2)
st<-matrix(c("banana", "ringo"), nrow = 1, ncol = 2)
st
mtrix[2,]
mtrix[,2]
mtrix[2,2]
mtrix[c(1,2),]
rownames(mtrix<-c("Name 1 ", "Name 2 "))
mtrix
mtrix
#matrixの作り方
mtrix<-matrix(c(1,2,3,4,5,6,7,8,9,0,11,22,33,44,55), nrow = 3, ncol = 5)
mtrix
rownames(mtrix<-c("Name 1 ", "Name 2 "))
mtrix
rownames(mtrix)<-c("Name 1 ", "Name 2 ")
mtrix<-matrix(c(1,2,3,4,5,6,7,8,9,0,11,22,33,44,55), nrow = 3, ncol = 5)
mtrix
rownames(mtrix)<-c("Name 1 ", "Name 2 ")
rownames(mtrix)<-c("Name 1 ", "Name 2 ","Name 3")
mtrix
mtrixX<-mtrix[-c(1),-c(1)]
mtrixX
#特定の物があるか確かめる(%in%)
5 %in% mtrix
length(mtrix)
G<- seq(5,9)# we can create a vector by using the seq function
G
Days<- c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
Days[3]
names(Days)<- c(0,1,2,3,4,5,6)
names(Days)
Days
sum(Days) # Be careful to use sum, mean or prod functions on numerical
a<- c(2,9, 5,7, 2, 6,7, 9)
sample(a,2, FALSE)
sample(a,2, FALSE)# sample() function is used to take a random sample of individuals
sample(4:70, 5)
sample(4:70, 5, replace=T)# with replacement
set.seed(10)# gives same sample
sample(4:70, 5, replace=T)# with replacement
sample(4:70, 5, replace=T)# with replacement
sample(4:70, 5, replace=T)# with replacement
classes=c("STAT123", "STAT345", "STAT255", "STAT226")
set.seed(125)
sub_classes=sample(classes, 2)
sub_classes
Data_farme<- data.frame(Subject= c("stat123", "stat233", "stat255", "Stat145"),
Section= c("A01", "B02", "C01", "D01"))
Data_Frame
Data_Frame <- data.frame (
Training = c("Strength", "Stamina", "Other"),
Pulse = c(100, 150, 120),
Duration = c(60, 30, 45)
)
# Remove the first row and column using -c()
Data_Frame_New <- Data_Frame[-c(1), -c(1)]
Data_Frame_New
#Use the dim() function to find the amount of rows and columns in a Data Frame
dim(Data_Frame_New)
# Use the length() function to find the number of columns in a Data Frame (similar to ncol())
length(Data_Frame_New)
#Use the summary() function to summarize the data from a Data Frame
summary(Data_Frame)
#A matrix is a two dimensional data set with columns and rows.Using matrix()
sample_matrix <- matrix(c(1,2,3,4,5,6,5,7,8,9,1,0,4,2,4), nrow = 3, ncol = 5)
sample2_matrix <- matrix(c("apple", "banana", "cherry", "cucumber"), nrow = 2, ncol = 2)
sample2_matrix
#You can access the items by using [ ] brackets.
#The first number "1" in the bracket specifies the row-position,
#while the second number "2" specifies the column-position:
sample_matrix
sample_matrix[1,2]#You can access the items by using [ ] brackets
sample_matrix[2,]
#More than one row can be accessed if you use the c() function
sample_matrix[c(1,2),]
rownames(sample2_matrix)<-c("Name1", "Name2")
sample2_matrix
colnames(sample2_matrix)<-c("Name3", "Name4")
sample2_matrix
rownames(sample2_matrix)[1]<-c("Name0")
sample2_matrix
"banana" %in% sample2_matrix
# Use the dim() function to find the number of rows and columns in a Matrix
dim(sample2_matrix)
#Use the length() function to find the dimension of a Matrix
length(sample2_matrix)
# List of strings
samplelist<- list("apple", "banana", "cherry")
samplelist
#You can access the list items by referring to its index number, inside brackets
samplelist2[2]
#To only print the levels, use the levels() function
levels(gender)
#To access the items in a factor, refer to the index number, using [] brackets
gender[5]
gender[5]<-"Male"
5/6
5^2
5%%2
gender <- factor(c("Male", "Female", "Male", "Male", "Female", "Male", "Female", "Female"))
gender
#To only print the levels, use the levels() function
levels(gender)
